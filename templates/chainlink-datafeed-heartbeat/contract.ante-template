`// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../AnteTest.sol";
import "@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol";

// @title ${protocolName} data feed for ${datafeed.name} heartbeat is respected on ${networkName}
// @notice Ensure that ${protocolName} data feed ${datafeed.name} update according to declared ${heartbeat.description} heartbeat
contract ${contractName} is
    AnteTest("Ensure that ${protocolName} data feed ${datafeed.name} update according to declared ${heartbeat.description} heartbeat")
{
    
    // datafeed ${datafeed.name} on ${networkName}
    AggregatorInterface constant datafeed = AggregatorInterface(${datafeed.address});
    
    uint256 constant declaredHeartbeat = ${heartbeat.valueSeconds};
    
    constructor() {
        protocolName = "${protocolName}";
        testedContracts = [
            ${datafeed.address}
        ];
    }

    function checkTestPasses() public view override returns (bool) {
        
        uint256 updatedAt = datafeed.latestTimestamp();
        if (updatedAt + declaredHeartbeat + 60 < block.timestamp) {
            return false;
        }
        return true;
    }
}
`